import hashlib
import os
import shutil
import subprocess
import tarfile
import urllib
import zipfile
from waflib import Logs
from waflib.extras.preparation import PreparationContext
from waflib.extras.build_status import BuildStatus
from waflib.extras.filesystem_utils import removeSubdir
from waflib.extras.mirror import MirroredTarFile, MirroredZipFile

__downloadUrl = 'https://github.com/google/glog/archive/%s'
__posixFile = 'v0.3.4.tar.gz'
__posixSha256Checksum = '\xce\x99\xd5\x8d\xce\x74\x45\x8f\x76\x56\xa6\x89\x35\xd7\xa0\xc0\x48\xfa\x7b\x46\x26\x56\x6a\x71\xb7\xf4\xe5\x45\x92\x0c\xeb\x10'
__ntFile = 'v0.3.4.zip'
__ntSha256Checksum = '\xd3\x48\x37\x55\xa4\x81\x89\x21\xb3\x17\xea\xea\x04\x28\xba\xc9\x5d\x9d\x4e\xc2\x36\x8a\x12\x54\x2c\x48\x2b\x7b\x78\x81\x48\x58'
__srcDir = 'src'

def options(optCtx):
    pass

def prepare(prepCtx):
    status = BuildStatus.init(prepCtx.path.abspath())
    if status.isSuccess():
	prepCtx.msg('Preparation already complete', 'skipping')
	return
    if os.name == 'posix':
	file = MirroredTarFile(
		__posixSha256Checksum,
		__downloadUrl % __posixFile,
		os.path.join(prepCtx.path.abspath(), __posixFile))
    elif os.name == 'nt':
	file = MirroredZipFile(
		__ntSha256Checksum,
		__downloadUrl % __ntFile,
		os.path.join(prepCtx.path.abspath(), __ntFile))
    else:
	prepCtx.fatal('Unsupported OS %s' % os.name)
    prepCtx.msg('Synchronising', file.getSrcUrl())
    if file.sync(10):
	prepCtx.msg('Saved to', file.getTgtPath())
    else:
	prepCtx.fatal('Synchronisation failed')
    extractDir = 'glog-0.3.4'
    removeSubdir(prepCtx.path.abspath(), __srcDir, extractDir)
    prepCtx.start_msg('Extracting files to')
    file.extract(prepCtx.path.abspath())
    os.rename(os.path.join(prepCtx.path.abspath(), extractDir), os.path.join(prepCtx.path.abspath(), __srcDir))
    prepCtx.end_msg(os.path.join(prepCtx.path.abspath(), __srcDir))

def configure(confCtx):
    confCtx.load('dep_resolver')
    status = BuildStatus.init(confCtx.path.abspath())
    if status.isSuccess():
	confCtx.msg('Configuration already complete', 'skipping')
	return
    srcPath = os.path.join(confCtx.path.abspath(), __srcDir)
    os.chdir(srcPath)
    confCtx.msg('CXXFLAGS', '-I%s/include' % confCtx.srcnode.abspath())
    confCtx.msg('LDFLAGS', '-L%s/lib' % confCtx.srcnode.abspath())
    if os.name == 'posix':
	returnCode = subprocess.call([
		'sh',
		os.path.join(srcPath, 'configure'),
		'--prefix=%s' % confCtx.srcnode.abspath(),
		'--disable-rtti',
		'CXXFLAGS=-I%s/include' % confCtx.srcnode.abspath(),
		'LDFLAGS=-L%s/lib' % confCtx.srcnode.abspath()])
	if returnCode != 0:
	    confCtx.fatal('Glog configure failed: %d' % returnCode)
    elif os.name == 'nt':
	# Nothing to do, just use the provided VS solution
	return
    else:
	confCtx.fatal('Unsupported OS %s' % os.name)

def build(buildCtx):
    status = BuildStatus.load(buildCtx.path.abspath())
    if status.isSuccess():
	Logs.pprint('NORMAL', 'Build already complete                   :', sep='')
	Logs.pprint('GREEN', 'skipping')
	return
    srcPath = os.path.join(buildCtx.path.abspath(), __srcDir)
    os.chdir(srcPath)
    if os.name == 'posix':
	returnCode = subprocess.call([
		'make',
		'install'])
    elif os.name == 'nt':
	returnCode = subprocess.call([
		'devenv.com',
		os.path.join(srcPath, 'vsprojects', 'libglog', 'libglog.vcproj')])
    else:
	confCtx.fatal('Unsupported OS %s' % os.name)
    if returnCode != 0:
	buildCtx.fatal('Glog build failed: %d' % returnCode)
    status.setSuccess()
