import fnmatch
import hashlib
import os
import shutil
import stat
import subprocess
import tarfile
import urllib
import zipfile
from waflib import Logs
from waflib.extras.preparation import PreparationContext
from waflib.extras.build_status import BuildStatus
from waflib.extras.filesystem_utils import removeSubdir
from waflib.extras.mirror import MirroredTarFile

__downloadUrl = 'http://download.savannah.gnu.org/releases/libunwind/%s'
__srcFile = 'libunwind-1.1.tar.gz'
__srcSha256Checksum = '\x9d\xfe\x0f\xca\xe2\xa8\x66\xde\x9d\x39\x42\xc6\x69\x95\xe4\xb4\x60\x23\x04\x46\x88\x7d\xbd\xab\x30\x2d\x41\xa8\xae\xe8\xd0\x9a'
__srcDir = 'src'

def options(optCtx):
    pass

def prepare(prepCtx):
    status = BuildStatus.init(prepCtx.path.abspath())
    if status.isSuccess():
	Logs.pprint('NORMAL', 'Build already complete                   :', sep='')
	Logs.pprint('GREEN', 'skipping')
	return
    srcPath = os.path.join(prepCtx.path.abspath(), __srcDir)
    file = MirroredTarFile(
	    __srcSha256Checksum,
	    __downloadUrl % __srcFile,
	    os.path.join(prepCtx.path.abspath(), __srcFile))
    prepCtx.msg('Synchronising', file.getSrcUrl())
    if file.sync(10):
	prepCtx.msg('Saved to', file.getTgtPath())
    else:
	prepCtx.fatal('Synchronisation failed')
    extractDir = 'libunwind-1.1'
    removeSubdir(prepCtx.path.abspath(), __srcDir, extractDir)
    prepCtx.msg(os.path.join(prepCtx.path.abspath(), extractDir), os.path.join(prepCtx.path.abspath(), __srcDir))
    prepCtx.start_msg('Extracting files to')
    file.extract(prepCtx.path.abspath())
    os.rename(os.path.join(prepCtx.path.abspath(), extractDir), os.path.join(prepCtx.path.abspath(), __srcDir))
    prepCtx.end_msg(srcPath)
    for dirPath, subDirList, fileList in os.walk(os.path.join(srcPath, 'scripts')):
	for file in fileList:
	    os.chmod(os.path.join(dirPath, file), stat.S_IXUSR | stat.S_IRUSR | stat.S_IWUSR)
    os.chdir(srcPath)
    if os.name == 'posix':
	returnCode = subprocess.call([
		'sh',
		os.path.join(srcPath, 'configure'),
		'--prefix=%s' % prepCtx.srcnode.abspath()])
	if returnCode != 0:
	    prepCtx.fatal('Libunwind configure failed: %d' % returnCode)
	returnCode = subprocess.call([
		'make',
		'install'])
	if returnCode != 0:
	    buildCtx.fatal('Libunwind build failed: %d' % returnCode)
    else:
	prepCtx.fatal('Unsupported OS %s' % os.name)
    status.setSuccess()
